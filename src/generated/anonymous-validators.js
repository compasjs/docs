// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

const objectKeys1278404364 = new Set([
  "filePath",
  "contentPath",
  "metadata",
  "htmlContent",
]);
const objectKeys675969221 = new Set([
  "type",
  "title",
  "date",
  "description",
  "order",
  "tags",
]);
const objectKeys730878810 = new Set(["type", "raw", "range"]);
const objectKeys781728730 = new Set(["start", "end", "pkg", "file", "line"]);
const objectKeys1282872738 = new Set([
  "type",
  "name",
  "summary",
  "description",
  "availableSince",
  "isVariable",
  "parsedType",
  "range",
]);
const objectKeys1865996329 = new Set(["type", "params", "returnType"]);
const objectKeys607756027 = new Set(["name", "description", "type"]);
const objectKeys835333298 = new Set([
  "type",
  "value",
  "isOptional",
  "defaultValue",
  "isDocBlockReference",
]);
const objectKeys1831335775 = new Set(["type", "value", "range"]);
/**
 * @param {*} value
 * @returns {boolean}
 */
export function isNil(value) {
  return value === undefined || value === null;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator186795873(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator1135331723(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 24) {
    const min = 24;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value.length > 29) {
    const max = 29;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  if (
    !/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/gi.test(
      value,
    )
  ) {
    errors.push({
      key: `validator.${parentType}.pattern`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|Date|undefined}
 */
export function anonymousValidator1988053796(
  value,
  propertyPath,
  errors = [],
  parentType = "date",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value === "string") {
    value = anonymousValidator1135331723(value, propertyPath, errors, "date");
  }
  try {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  } catch {
    errors.push({
      key: `validator.${parentType}.invalid`,
      info: { propertyPath },
    });
    return undefined;
  }
  errors.push({
    key: `validator.${parentType}.invalid`,
    info: { propertyPath },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator840286224(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push({
      key: `validator.${parentType}.integer`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {(string)[]|undefined}
 */
export function anonymousValidator1898391521(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"type": "blog"|"page", "title": string, "date"?: Date, "description": string, "order": number, "tags": (string)[], }|undefined}
 */
export function anonymousValidator675969221(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys675969221.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "blog" && value["type"] !== "page") {
    const parentType = "string";
    const oneOf = ["blog", "page"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["title"] = anonymousValidator186795873(
    value["title"],
    `${propertyPath}.title`,
    errors,
  );
  result["date"] = anonymousValidator1988053796(
    value["date"],
    `${propertyPath}.date`,
    errors,
  );
  result["description"] = anonymousValidator186795873(
    value["description"],
    `${propertyPath}.description`,
    errors,
  );
  result["order"] = anonymousValidator840286224(
    value["order"],
    `${propertyPath}.order`,
    errors,
  );
  result["tags"] = anonymousValidator1898391521(
    value["tags"],
    `${propertyPath}.tags`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|string|undefined}
 */
export function anonymousValidator1443576836(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length === 0) {
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"filePath": string, "contentPath": string, "metadata"?: {"type": "blog"|"page", "title": string, "date"?: Date, "description": string, "order": number, "tags": (string)[], }, "htmlContent"?: string, }|undefined}
 */
export function anonymousValidator1278404364(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1278404364.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["filePath"] = anonymousValidator186795873(
    value["filePath"],
    `${propertyPath}.filePath`,
    errors,
  );
  result["contentPath"] = anonymousValidator186795873(
    value["contentPath"],
    `${propertyPath}.contentPath`,
    errors,
  );
  result["metadata"] = anonymousValidator675969221(
    value["metadata"],
    `${propertyPath}.metadata`,
    errors,
  );
  result["htmlContent"] = anonymousValidator1443576836(
    value["htmlContent"],
    `${propertyPath}.htmlContent`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator105524495(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push({
      key: `validator.${parentType}.integer`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"start": number, "end": number, "pkg": DocParserPackage, "file": string, "line"?: string, }|undefined}
 */
export function anonymousValidator781728730(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys781728730.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["start"] = anonymousValidator105524495(
    value["start"],
    `${propertyPath}.start`,
    errors,
  );
  result["end"] = anonymousValidator105524495(
    value["end"],
    `${propertyPath}.end`,
    errors,
  );
  if (value["pkg"] !== "insight" && value["pkg"] !== "stdlib") {
    const parentType = "string";
    const oneOf = ["insight", "stdlib"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.pkg`, oneOf },
    });
  }
  result["pkg"] = value["pkg"] ?? undefined;
  result["file"] = anonymousValidator186795873(
    value["file"],
    `${propertyPath}.file`,
    errors,
  );
  result["line"] = anonymousValidator1443576836(
    value["line"],
    `${propertyPath}.line`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "unknown", "raw": string, "range": DocParserRange, }|undefined}
 */
export function anonymousValidator730878810(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys730878810.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "unknown") {
    const parentType = "string";
    const oneOf = ["unknown"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["raw"] = anonymousValidator186795873(
    value["raw"],
    `${propertyPath}.raw`,
    errors,
  );
  result["range"] = anonymousValidator781728730(
    value["range"],
    `${propertyPath}.range`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "literal", "value": string, "isOptional"?: boolean, "defaultValue"?: string, "isDocBlockReference"?: boolean, }|undefined}
 */
export function anonymousValidator835333298(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys835333298.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "literal") {
    const parentType = "string";
    const oneOf = ["literal"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["value"] = anonymousValidator186795873(
    value["value"],
    `${propertyPath}.value`,
    errors,
  );
  if (!isNil(value["isOptional"]) && typeof value["isOptional"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isOptional` },
    });
  }
  result["isOptional"] = value["isOptional"] ?? undefined;
  result["defaultValue"] = anonymousValidator1443576836(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  if (
    !isNil(value["isDocBlockReference"]) &&
    typeof value["isDocBlockReference"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isDocBlockReference` },
    });
  }
  result["isDocBlockReference"] = value["isDocBlockReference"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {DocParserLiteralType|DocParserFunctionType|undefined}
 */
export function anonymousValidator2103344335(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator835333298(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1865996329(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  errors.push({
    key: `validator.${parentType}.type`,
    info: { propertyPath, errors: subErrors },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"name": string, "description": string, "type": DocParserType, }|undefined}
 */
export function anonymousValidator607756027(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys607756027.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["name"] = anonymousValidator186795873(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["description"] = anonymousValidator186795873(
    value["description"],
    `${propertyPath}.description`,
    errors,
  );
  result["type"] = anonymousValidator2103344335(
    value["type"],
    `${propertyPath}.type`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {({"name": string, "description": string, "type": DocParserType, })[]|undefined}
 */
export function anonymousValidator2044597891(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator607756027(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "function", "params": ({"name": string, "description": string, "type": DocParserType, })[], "returnType": DocParserType, }|undefined}
 */
export function anonymousValidator1865996329(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1865996329.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "function") {
    const parentType = "string";
    const oneOf = ["function"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["params"] = anonymousValidator2044597891(
    value["params"],
    `${propertyPath}.params`,
    errors,
  );
  result["returnType"] = anonymousValidator2103344335(
    value["returnType"],
    `${propertyPath}.returnType`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "functionDeclaration", "name"?: string, "summary"?: string, "description"?: string, "availableSince"?: string, "isVariable": boolean, "parsedType": DocParserFunctionType, "range": DocParserRange, }|undefined}
 */
export function anonymousValidator1282872738(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1282872738.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "functionDeclaration") {
    const parentType = "string";
    const oneOf = ["functionDeclaration"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["summary"] = anonymousValidator1443576836(
    value["summary"],
    `${propertyPath}.summary`,
    errors,
  );
  result["description"] = anonymousValidator1443576836(
    value["description"],
    `${propertyPath}.description`,
    errors,
  );
  result["availableSince"] = anonymousValidator1443576836(
    value["availableSince"],
    `${propertyPath}.availableSince`,
    errors,
  );
  if (isNil(value["isVariable"]) || typeof value["isVariable"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isVariable` },
    });
  }
  result["isVariable"] = value["isVariable"] ?? undefined;
  result["parsedType"] = anonymousValidator1865996329(
    value["parsedType"],
    `${propertyPath}.parsedType`,
    errors,
  );
  result["range"] = anonymousValidator781728730(
    value["range"],
    `${propertyPath}.range`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {DocParserUnknownBlock|DocParserFunctionDeclarationBlock|undefined}
 */
export function anonymousValidator796176522(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator730878810(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1282872738(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  errors.push({
    key: `validator.${parentType}.type`,
    info: { propertyPath, errors: subErrors },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "MultiLine"|"SingleLine", "value": string, "range": DocParserRange, }|undefined}
 */
export function anonymousValidator1831335775(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1831335775.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["type"] !== "MultiLine" && value["type"] !== "SingleLine") {
    const parentType = "string";
    const oneOf = ["MultiLine", "SingleLine"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["value"] = anonymousValidator186795873(
    value["value"],
    `${propertyPath}.value`,
    errors,
  );
  result["range"] = anonymousValidator781728730(
    value["range"],
    `${propertyPath}.range`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {"insight"|"stdlib"|undefined}
 */
export function anonymousValidator1407080209(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value !== "insight" && value !== "stdlib") {
    const oneOf = ["insight", "stdlib"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath, oneOf },
    });
    return undefined;
  }
  return value;
}
